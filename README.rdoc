== Rails Girls More 実施内容

1. 貯金額を保存するための処理（保存するためのDB、画面、各種操作）を作る

    $ rails generate scaffold savings date:date price:integer

2. スペルミスとかしたら、一度削除して作りなおすことができる

    $ rails d scaffold savings date:date price:integer
    $ rails g scaffold savings date:date price:integer

3. データベースの作成

    $ rake db:migrate

4. Webサーバの起動

    $ rails server

5. 動いたなら、コミットしよう。gitリポジトリを作成する。

    $ git init

6. gitでコミット。コミットは最低限これだけを覚えればOK。

    $ git add .
    $ got commit -m "initial commit"

7. index画面に貯金額の合計を出す。

ViewでもControllerでもModelでも好きなところにかけるんですが、Modelに書くのがBest Practice。

    app/models/saving.rbに合計を求める処理を実装。

8. どうやって合計を求める？

ControllerのindexアクションでSaving.allっていうのがあったよね。あれでsavingsテーブルにあるすべてのレコードを取得出来ます。そこから一件一件取り出すには？→eachを使う。

    sum = 0
    Saving.all.each do |saving|
      sum += saving.price
    end
    sum

（追記）上のプログラムはもっと短い書き方ができるのでチャレンジ。

9. Controllerでsumメソッドを呼び出し、それを@sumに格納する。

10. viewで@sumを参照すると、合計額を出すことができる。

11. メール送信したい。

Googleで検索すると、分かりやすそうなサイトを発見（ http://morizyun.github.com/blog/action-mailer-rails-mail/ ）。ここを参考に。

メール送信するためのクラスなどを作成する。

    $ rails g mailer message notice

12. rails consoleで動くか確認

    $ rails console
    > Message.notice.deliver

13. viewにメール送信を指示するリンクを作成

14. config/routes.rbにメール送信用のルートを作成

15. Controllerにアクションを作成。

      def send_mail
        Message.notice.deliver
      end

16. TemplateMissingがでた〜

次の画面を指示する。

      def send_mail
        Message.notice.deliver
        redirect_to action: :index
      end

（追記）メールの確認は、consoleで流れるものを見てもいいけど、MailCatcher（http://mailcatcher.me/）を試してもいいかも。

17. Hashの書き方

これらは全部一緒

        :action => "index"
        :action => :index
        action: :index

シンボルと文字列の違いはここを見ると良いかも。（ http://d.hatena.ne.jp/zariganitosh/20061118/1163851550 ）

18. メールリンクの作成

viewでmail_toを使うとOK

19. CSSでかっちょよくしたい。

Foundationのインストール。ここを参考に。（http://foundation.zurb.com/docs/rails.html ）

20. インストール

      rails g foundation:install

21. インストール後はrails serverを再起動する

